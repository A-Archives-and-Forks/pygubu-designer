# translator marker
def _(x):
    return x

tooltip_help = {
    'class': _('Object class name.'),
    'id': _('Object unique identifier.'),
    'accelerator': None,
    'activerelief': None,
    'activestyle': None,
    'activebackground': _('Specifies background color to use when drawing active elements.'),
    'activeborderwidth': _('Specifies a non-negative value indicating the width of the 3-D border drawn around active elements.'),
    'activeforeground': _('Specifies foreground color to use when drawing active elements.'),
    'after': None,
    'anchor': _('Specifies how the information in the widget is positioned relative to the inner margins.'),
    'aspect': None,
    'autoseparators': None,
    'background-tk': _("Specifies the normal background color to use when displaying the widget."),
    'background-ttk': _("The widget's background color. If unspecified, the theme default is used."),
    'borderwidth': _('Specifies a non-negative value indicating the width of the 3-D border to draw around the outside of the widget.'),
    'bigincrement': None,
    'bitmap': _('Specifies a bitmap to display in the widget.'),
    'blockcursor': None,
    'buttonbackground': _("The widget's background color. If unspecified, the theme default is used."),
    'buttoncursor': None,
    'buttondownrelief': None,
    'buttonuprelief': None,
    'class_': _("Specifies the window class. The class is used when querying the option database for the window's other options, to determine the default bindtags for the window, and to select the widget's default layout and style."),
    'closeenough': None,
    'column_anchor': None,
    'columnbreak': None,
    'command': None,
    'command-pygubu': _('In pygubu-designer, a python function name used as the callback for the button command.'),
    'compound-tk': _('Specifies if the widget should display text and bitmaps/images at the same time, and if so, where the bitmap/image should be placed relative to the text.'),
    'compound-ttk': _('Specifies how to display the image relative to the text, in the case both -text and -image are present.'),
    'confine': None,
    'container': _('If true, it means that this window will be used as a container in which some other application will be embedded. The window should not have any children of its own in this application.'),
    'cursor': _('Specifies the mouse cursor to be used for the widget.'),
    'default': _("In a dialog box, one button may be designated the “default” button. active indicates that this is currently the default button; normal means that it may become the default button, and disabled means that it is not defaultable."),
    'digits': None,
    'direction': None,
    'disabledbackground': None,
    'disabledforeground': _('Specifies foreground color to use when drawing a disabled element.'),
    'elementborderwidth': None,
    'endline': None,
    'exportselection': _('Specifies whether or not a selection in the widget should be linked to the X selection.'),
    'font': _('Specifies the font to use when drawing text inside the widget.'),
    'foreground-tk': _('Specifies the normal foreground color to use when displaying the widget.'),
    'foreground-ttk': _("The widget's foreground color. If unspecified, the theme default is used."),
    'format': None,
    'from_': None,
    'handlepad': None,
    'handlesize': None,
    'heading_anchor': None,
    'height': _('Specifies the desired height for the widget.'),
    'height-tk.Button': _('Specifies a desired height for the button. If an image or bitmap is being displayed in the button then the value is in screen units; for text it is in lines of text.'),
    'hidemargin': None,
    'highlightbackground': _('Specifies the color to display in the traversal highlight region when the widget does not have the input focus.'),
    'highlightcolor': _('Specifies the color to use for the traversal highlight rectangle that is drawn around the widget when it has the input focus.'),
    'highlightthickness': _('Specifies a non-negative value indicating the width of the highlight rectangle to draw around the outside of the widget when it has the input focus.'),
    'image-tk': _('Specifies an image to display in the widget'),
    'image-ttk': _('Specifies an image to display. This is a list of 1 or more elements. The first element is the default image name.'),
    'inactiveselectbackground': None,
    'increment': None,
    'indicatoron': None,
    'insertbackground': _('Specifies the color to use as background in the area covered by the insertion cursor.'),
    'insertborderwidth': _('Specifies a non-negative value indicating the width of the 3-D border to draw around the insertion cursor.'),
    'insertofftime': _('Specifies a non-negative integer value indicating the number of milliseconds the insertion cursor should remain “off” in each blink cycle.'),
    'insertontime': _('Specifies a non-negative integer value indicating the number of milliseconds the insertion cursor should remain “on” in each blink cycle.'),
    'insertunfocussed': None,
    'insertwidth': _('Specifies a value indicating the total width of the insertion cursor.'),
    'invalidcommand': None,
    'jump': _("For widgets with a slider that can be dragged to adjust a value, such as scrollbars, this option determines when notifications are made about changes in the value.If the value is false, updates are made continuously as the slider is dragged. If the value is true, updates are delayed until the mouse button is released to end the drag; at that point a single notification is made."),
    'justify': _('If there are multiple lines of text, specifies how the lines are laid out relative to one another.'),
    'justify-ttk.Entry': _('Specifies how the text is aligned within the entry widget.'),
    'label': None,
    'labelanchor': _('Specifies where to place the label. The default value is theme-dependent.'),
    'length': None,
    'listvariable': None,
    'maximum': None,
    'maxundo': None,
    'minsize': None,
    'minwidth': None,
    'mode': None,
    'offrelief': None,
    'offvalue': _('The value to store in the associated variable when the widget is deselected. Defaults to 0.'),
    'onvalue': _('The value to store in the associated variable when the widget is selected. Defaults to 1.'),
    'opaqueresize': None,
    'orient': _('For widgets that can lay themselves out with either a horizontal or vertical orientation, this option specifies which orientation should be used.'),
    'overrelief': _('Specifies an alternative relief for the button, to be used when the mouse cursor is over the widget.'),
    'padding': _('Specifies the internal padding for the widget. The padding is a list of up to four length specifications left top right bottom.'),
    'padx': _('Specifies a non-negative value indicating how much extra space to request for the widget in the X-direction.'),
    'pady': _('Specifies a non-negative value indicating how much extra space to request for the widget in the Y-direction.'),
    'postcommand': None,
    'readonlybackground': None,
    'relief': _('Specifies the 3-D effect desired for the widget border.'),
    'repeatdelay': _('Specifies the number of milliseconds a button or key must be held down before it begins to auto-repeat.'),
    'repeatinterval': _('Used in conjunction with -repeatdelay: once auto-repeat begins, this option determines the number of milliseconds between auto-repeats.'),
    'resolution': None,
    'sliderlength': None,
    'sliderrelief': None,
    'sashcursor': None,
    'sashpad': None,
    'sashrelief': None,
    'sashwidth': None,
    'selectbackground': _('Specifies the background color to use when displaying selected items.'),
    'selectborderwidth': _('Specifies a non-negative value indicating the width of the 3-D border to draw around selected items.'),
    'selectforeground': _('Specifies the foreground color to use when displaying selected items.'),
    'scrollregion': None,
    'selectcolor': None,
    'selectimage': None,
    'selectmode': None,
    'setgrid': None,
    'show': _("If this option is specified, then the true contents of the entry are not displayed in the window. Instead, each character in the entry's value will be displayed as the first character in the value of this option."),
    'showhandle': None,
    'showvalue': None,
    'spacing1': None,
    'spacing2': None,
    'spacing3': None,
    'startline': None,
    'state': _('May be set to normal or disabled to control the disabled state bit.'),
    'sticky': None,
    'stretch': None,
    'style': _('May be used to specify a custom widget style.'),
    'tabs': None,
    'tabstyle': None,
    'takefocus': _('Determines whether the window accepts the focus during keyboard traversal.'),
    'tearoff': None,
    'tearoffcommand': None,
    'text': _('Specifies a text string to be displayed inside the widget.'),
    'text-custom': _('Custom option to set the widget text.'),
    'textvariable': _('Specifies the name of a variable whose value will be used in place of the -text resource.'),
    'tickinterval': None,
    'to': None,
    'tristateimage': None,
    'tristatevalue': None,
    'troughcolor': _('Specifies the color to use for the rectangular trough areas in widgets such as scrollbars and scales.'),
    'underline': _('Specifies the integer index (0-based) of a character to underline in the text string.'),
    'undo': None,
    'value': None,
    'values': None,
    'validate': _('Specifies the mode in which validation should operate.'),
    'validatecommand': None,
    'variable': _('The name of a variable whose value is linked to the widget.'),
    'weight': None,
    'width': _('Specifies the desired width for the widget.'),
    'width-tk': _('Specifies a desired width for the label. If an image or bitmap is being displayed in the label then the value is in screen units; for text it is in characters.'),
    'width-ttk': _('If greater than zero, specifies how much space, in character widths, to allocate for the text label. If less than zero, specifies a minimum width.'),
    'width-tk.Label': _('Specifies a desired width for the label. If an image or bitmap is being displayed in the label then the value is in screen units; for text it is in characters.'),
    'width-tk.Button': _('Specifies a desired width for the button. If an image or bitmap is being displayed in the button then the value is in screen units. For a text button (no image or with -compound none) then the width specifies how much space in characters to allocate for the text label. If the width is negative then this specifies a minimum width.'),
    'width-tk.Entry': _("Specifies an integer value indicating the desired width of the entry window, in average-size characters of the widget's font."),
    'width-ttk.Label': _('If greater than zero, specifies how much space, in character widths, to allocate for the text label. If less than zero, specifies a minimum width.'),
    'wrap': None,
    'wraplength': _('Specifies the maximum line length (in pixels).'),
    'xscrollcommand': None,
    'xscrollincrement': None,
    'yscrollcommand': None,
    'yscrollincrement': None,
    #
    # Layout properties
    #
    'padx-layout': _('Specifies how much horizontal external padding to leave on each side of the content.'),
    'pady-layout': _('Specifies how much vertical external padding to leave on each side of the content.'),
    'ipadx-layout': _('Specifies how much horizontal internal padding to leave on each side of the content.'),
    'ipady-layout': _('Specifies how much vertical internal padding to leave on each side of the content.'),
    'propagate-layout': _('Enable/Disable Geometry Propagation'),
    'anchor-layout': _('It specifies where to position each content in its parcel.'),
    'anchor-layout-place': _('Specifies which point of window is to be positioned at the (x,y) location selected by the -x, -y, -relx, and -rely options.'),
    # pack properties
    'expand-pack': _('Specifies whether the content should be expanded to consume extra space in their container.'),
    'fill-pack': _("If a content's parcel is larger than its requested dimensions, this option may be used to stretch the content."),
    'side-pack': _('Specifies which side of the container the content will be packed against.'),
    'bordermode-pack': _('Determines the degree to which borders within the container are used in determining the placement of the content.'),
    'height-pack': _('Specifies the height for window in screen units'),
    'relheight-pack': _('Specifies the height for window. In this case the height is specified as a floating-point number relative to the height of the container: 0.5 means window will be half as high as the container, 1.0 means window will have the same height as the container, and so on. If both -height and -relheight are specified for a content, their values are summed.'),
    'relwidth-pack': _('Specifies the width for window. In this case the width is specified as a floating-point number relative to the width of the container: 0.5 means window will be half as wide as the container, 1.0 means window will have the same width as the container, and so on. If both -width and -relwidth are specified for a content, their values are summed.'),
    'relx-pack': _('Specifies the x-coordinate within the container window of the anchor point for window. In this case the location is specified in a relative fashion as a floating-point number: 0.0 corresponds to the left edge of the container and 1.0 corresponds to the right edge of the container.'),
    'rely-pack': _('Specifies the y-coordinate within the container window of the anchor point for window. In this case the value is specified in a relative fashion as a floating-point number: 0.0 corresponds to the top edge of the container and 1.0 corresponds to the bottom edge of the container.'),
    'width-pack': _('Specifies the width for window in screen units.'),
    'x-pack': _('Specifies the x-coordinate within the container window of the anchor point for window.'),
    'y-pack': _('Specifies the y-coordinate within the container window of the anchor point for window.'),
    #
    # grid packing properties
    'row-grid': _('Insert the content so that it occupies the nth row in the grid.'),
    'column-grid': _('Insert the window so that it occupies the nth column in the grid.'),
    'sticky-grid': _("If a content's cell is larger than its requested dimensions, this option may be used to position (or stretch) the content within its cell."),
    'rowspan-grid': _('Insert the content so that it occupies n rows in the grid.'),
    'columnspan-grid': _('Insert the window so that it occupies n columns in the grid.'),
    #
    # grid row and column properties (can be applied to each row or column)
    'minsize-grid': _('Sets the minimum size, in screen units, that will be permitted for this row.'),
    'pad-grid': _('Specifies the number of screen units that will be added to the largest window contained completely in that row when the grid geometry manager requests a size from the containing window.'),
    'weight-grid': _('Sets the relative weight for apportioning any extra spaces among rows.'),
    'uniform-grid': _('When a non-empty value is supplied, places the row in a uniform group with other rows that have the same value for -uniform.')
}

def help_for(pname):
    return tooltip_help[pname]

